1.Creating Context

import { createContext } from "react";

export const UserContext = createContext();


Provide data using provider

import { UserContext } from "./UserContext";

function App() {
  const user = { name: "John Doe" };

  return (
    <UserContext.Provider value={user}>
      <Navbar />
    </UserContext.Provider>
  );
}

3 Consume the data anywhere using useContext.
 
import { useContext } from "react";
import { UserContext } from "./UserContext";

function Avatar() {
  const user = useContext(UserContext);

  return <h1>{user.name}</h1>;
}
  So whatâ€™s happening?
Concept	Meaning
createContext()	Makes a context (container for data).
Provider	Wraps components and shares data.
useContext()	Reads the data inside any child component.
useContext = share global data easily across your app without passing props.

function Form() {
  const [name, setName] = useState("");

  return (
    <input
      type="text"
      value={name}
      onChange={(e) => setName(e.target.value)}
    />
  );
}
-----------------------------------------------------------
custom hooks

import { useState, useEffect } from "react";

  function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch(url)
      .then((res) => res.json())
      .then((data) => {
        setData(data);
        setLoading(false);
      });
  }, [url]);

  return { data, loading };
}
ðŸ”¹ How to use it:
 
import { useFetch } from "./useFetch";

function Users() {
  const { data, loading } = useFetch("https://api.example.com/users");

  if (loading) return <p>Loading...</p>;

  return (
    <ul>
      {data.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
}
